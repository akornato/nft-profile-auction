/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProfileAuctionInterface extends ethers.utils.Interface {
  functions: {
    "blockWait()": FunctionFragment;
    "buyProfile(string)": FunctionFragment;
    "buyProfileWithPermit(string,uint8,bytes32,bytes32)": FunctionFragment;
    "changeBidURI(string,string)": FunctionFragment;
    "claimProfile(string)": FunctionFragment;
    "getBids(address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "mintProfileFor(address,string)": FunctionFragment;
    "nftProfileHelperAddress()": FunctionFragment;
    "profileFee()": FunctionFragment;
    "publicClaim()": FunctionFragment;
    "redeemProfile(uint256)": FunctionFragment;
    "removeProfileBid(string)": FunctionFragment;
    "setBlockWait(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setProfileFee(uint256)": FunctionFragment;
    "setPublicClaim(uint256)": FunctionFragment;
    "setStaticFee(uint256)": FunctionFragment;
    "staticFee()": FunctionFragment;
    "submitProfileBid(uint256,string)": FunctionFragment;
    "submitProfileBidWithPermit(uint256,string,uint8,bytes32,bytes32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "blockWait", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyProfile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyProfileWithPermit",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBidURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProfile",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBids", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintProfileFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftProfileHelperAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profileFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProfileBid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProfileFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaticFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staticFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitProfileBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProfileBidWithPermit",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "blockWait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyProfileWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBidURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintProfileFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftProfileHelperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profileFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProfileBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfileFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStaticFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staticFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProfileBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProfileBidWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ChangedBidURI(address,string,string,uint256)": EventFragment;
    "MintedProfile(address,string,uint256,uint256)": EventFragment;
    "NewBid(address,string,uint256)": EventFragment;
    "NewClaimableProfile(address,string,uint256,uint256)": EventFragment;
    "RedeemProfile(address,string,uint256,uint256,uint256)": EventFragment;
    "RemoveBid(address,string,uint256)": EventFragment;
    "UpdateBid(address,string,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedBidURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewClaimableProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type ChangedBidURIEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _user: string;
    _old: string;
    _new: string;
    _merge: BigNumber;
  }
>;

export type MintedProfileEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _user: string;
    _val: string;
    _amount: BigNumber;
    _blockNum: BigNumber;
  }
>;

export type NewBidEvent = TypedEvent<
  [string, string, BigNumber] & {
    _user: string;
    _val: string;
    _amount: BigNumber;
  }
>;

export type NewClaimableProfileEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _user: string;
    _val: string;
    _amount: BigNumber;
    _blockNum: BigNumber;
  }
>;

export type RedeemProfileEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    _val: string;
    _block: BigNumber;
    _amount: BigNumber;
    _tokenId: BigNumber;
  }
>;

export type RemoveBidEvent = TypedEvent<
  [string, string, BigNumber] & {
    _user: string;
    _val: string;
    _amount: BigNumber;
  }
>;

export type UpdateBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _user: string;
    _val: string;
    _addition: BigNumber;
    _final: BigNumber;
  }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class ProfileAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProfileAuctionInterface;

  functions: {
    blockWait(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyProfileWithPermit(
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeBidURI(
      _oldProfileURI: string,
      _newProfileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBids(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string, BigNumber] & {
          _nftTokens: BigNumber;
          _blockMinted: BigNumber;
          _profileURI: string;
          _blockWait: BigNumber;
        })[]
      ]
    >;

    initialize(
      _nftErc20Contract: string,
      _minter: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _coldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintProfileFor(
      _buyer: string,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<[string]>;

    profileFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemProfile(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProfileBid(
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockWait(
      _wait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfileFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicClaim(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaticFee(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staticFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitProfileBid(
      _nftTokens: BigNumberish,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitProfileBidWithPermit(
      _nftTokens: BigNumberish,
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blockWait(overrides?: CallOverrides): Promise<BigNumber>;

  buyProfile(
    _profileURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyProfileWithPermit(
    _profileURI: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeBidURI(
    _oldProfileURI: string,
    _newProfileURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimProfile(
    _profileURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBids(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string, BigNumber] & {
      _nftTokens: BigNumber;
      _blockMinted: BigNumber;
      _profileURI: string;
      _blockWait: BigNumber;
    })[]
  >;

  initialize(
    _nftErc20Contract: string,
    _minter: string,
    _nftProfile: string,
    _governor: string,
    _nftProfileHelperAddress: string,
    _coldWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintProfileFor(
    _buyer: string,
    _profileURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftProfileHelperAddress(overrides?: CallOverrides): Promise<string>;

  profileFee(overrides?: CallOverrides): Promise<BigNumber>;

  publicClaim(overrides?: CallOverrides): Promise<BigNumber>;

  redeemProfile(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProfileBid(
    _profileURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockWait(
    _wait: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _new: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfileFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicClaim(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaticFee(
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staticFee(overrides?: CallOverrides): Promise<BigNumber>;

  submitProfileBid(
    _nftTokens: BigNumberish,
    _profileURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitProfileBidWithPermit(
    _nftTokens: BigNumberish,
    _profileURI: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockWait(overrides?: CallOverrides): Promise<BigNumber>;

    buyProfile(_profileURI: string, overrides?: CallOverrides): Promise<void>;

    buyProfileWithPermit(
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeBidURI(
      _oldProfileURI: string,
      _newProfileURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimProfile(_profileURI: string, overrides?: CallOverrides): Promise<void>;

    getBids(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string, BigNumber] & {
        _nftTokens: BigNumber;
        _blockMinted: BigNumber;
        _profileURI: string;
        _blockWait: BigNumber;
      })[]
    >;

    initialize(
      _nftErc20Contract: string,
      _minter: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _coldWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintProfileFor(
      _buyer: string,
      _profileURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<string>;

    profileFee(overrides?: CallOverrides): Promise<BigNumber>;

    publicClaim(overrides?: CallOverrides): Promise<BigNumber>;

    redeemProfile(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProfileBid(
      _profileURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockWait(_wait: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOwner(_new: string, overrides?: CallOverrides): Promise<void>;

    setProfileFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPublicClaim(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaticFee(_rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    staticFee(overrides?: CallOverrides): Promise<BigNumber>;

    submitProfileBid(
      _nftTokens: BigNumberish,
      _profileURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProfileBidWithPermit(
      _nftTokens: BigNumberish,
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "ChangedBidURI(address,string,string,uint256)"(
      _user?: null,
      _old?: null,
      _new?: null,
      _merge?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _user: string; _old: string; _new: string; _merge: BigNumber }
    >;

    ChangedBidURI(
      _user?: null,
      _old?: null,
      _new?: null,
      _merge?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _user: string; _old: string; _new: string; _merge: BigNumber }
    >;

    "MintedProfile(address,string,uint256,uint256)"(
      _user?: null,
      _val?: null,
      _amount?: null,
      _blockNum?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _amount: BigNumber; _blockNum: BigNumber }
    >;

    MintedProfile(
      _user?: null,
      _val?: null,
      _amount?: null,
      _blockNum?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _amount: BigNumber; _blockNum: BigNumber }
    >;

    "NewBid(address,string,uint256)"(
      _user?: null,
      _val?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _val: string; _amount: BigNumber }
    >;

    NewBid(
      _user?: null,
      _val?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _val: string; _amount: BigNumber }
    >;

    "NewClaimableProfile(address,string,uint256,uint256)"(
      _user?: null,
      _val?: null,
      _amount?: null,
      _blockNum?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _amount: BigNumber; _blockNum: BigNumber }
    >;

    NewClaimableProfile(
      _user?: null,
      _val?: null,
      _amount?: null,
      _blockNum?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _amount: BigNumber; _blockNum: BigNumber }
    >;

    "RedeemProfile(address,string,uint256,uint256,uint256)"(
      _user?: null,
      _val?: null,
      _block?: null,
      _amount?: null,
      _tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _val: string;
        _block: BigNumber;
        _amount: BigNumber;
        _tokenId: BigNumber;
      }
    >;

    RedeemProfile(
      _user?: null,
      _val?: null,
      _block?: null,
      _amount?: null,
      _tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _val: string;
        _block: BigNumber;
        _amount: BigNumber;
        _tokenId: BigNumber;
      }
    >;

    "RemoveBid(address,string,uint256)"(
      _user?: null,
      _val?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _val: string; _amount: BigNumber }
    >;

    RemoveBid(
      _user?: null,
      _val?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _val: string; _amount: BigNumber }
    >;

    "UpdateBid(address,string,uint256,uint256)"(
      _user?: null,
      _val?: null,
      _addition?: null,
      _final?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _addition: BigNumber; _final: BigNumber }
    >;

    UpdateBid(
      _user?: null,
      _val?: null,
      _addition?: null,
      _final?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _val: string; _addition: BigNumber; _final: BigNumber }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    blockWait(overrides?: CallOverrides): Promise<BigNumber>;

    buyProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyProfileWithPermit(
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeBidURI(
      _oldProfileURI: string,
      _newProfileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBids(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _nftErc20Contract: string,
      _minter: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _coldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintProfileFor(
      _buyer: string,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<BigNumber>;

    profileFee(overrides?: CallOverrides): Promise<BigNumber>;

    publicClaim(overrides?: CallOverrides): Promise<BigNumber>;

    redeemProfile(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProfileBid(
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockWait(
      _wait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfileFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicClaim(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaticFee(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staticFee(overrides?: CallOverrides): Promise<BigNumber>;

    submitProfileBid(
      _nftTokens: BigNumberish,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitProfileBidWithPermit(
      _nftTokens: BigNumberish,
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyProfileWithPermit(
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeBidURI(
      _oldProfileURI: string,
      _newProfileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimProfile(
      _profileURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBids(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _nftErc20Contract: string,
      _minter: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _coldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintProfileFor(
      _buyer: string,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftProfileHelperAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profileFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemProfile(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProfileBid(
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockWait(
      _wait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfileFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicClaim(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaticFee(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staticFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProfileBid(
      _nftTokens: BigNumberish,
      _profileURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitProfileBidWithPermit(
      _nftTokens: BigNumberish,
      _profileURI: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
